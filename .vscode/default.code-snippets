{
	// Place your zig-aoc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Loop lines": {
		"scope": "zig",
		"prefix": "lines",
		"body": [
			"var lines = std.mem.splitScalar(u8, input, '\\n');",
			"while (lines.next()) |line| {",
			"\t_ = line;"
			"\t$0",
			"}"
		],
		"description": "Splits `input` on the '\n' scalar"
	},
	"Boilerplate for a new day": {
		"scope": "zig",
		"prefix": "new-day",
		"body": [
			"const std = @import(\"std\");",
			"",
			"pub fn part1(input: []const u8, allocator: std.mem.Allocator) !u32 {",
			"\t_ = allocator;",
			"\t_ = input;",
			"\t$0",
			"\treturn 0;",
			"}",
			"",
			"test \"Part 1 example\" {",
			"\tvar result = try part1(testInput, std.testing.allocator);",
			"",
			"\ttry std.testing.expectEqual(@as(u32, 0), result);",
			"}",
			"",
			"const testInput =",
			"\t\\\\\\",
			";",
		]
	}
}